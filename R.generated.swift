//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 6 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperUbiquityKvstoreIdentifier = infoPlistString(path: [], key: "com.apple.developer.ubiquity-kvstore-identifier") ?? "$(TeamIdentifierPrefix)$(CFBundleIdentifier)"

    struct comAppleDeveloperIcloudContainerIdentifiers {
      static let iCloudWwwDonelkysNoIce = infoPlistString(path: ["com.apple.developer.icloud-container-identifiers"], key: "iCloud.www.donelkys.NoIce") ?? "iCloud.www.donelkys.NoIce"

      fileprivate init() {}
    }

    struct comAppleDeveloperIcloudServices {
      static let cloudDocuments = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudDocuments") ?? "CloudDocuments"
      static let cloudKit = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudKit") ?? "CloudKit"

      fileprivate init() {}
    }

    struct comAppleDeveloperUbiquityContainerIdentifiers {
      static let iCloudWwwDonelkysNoIce = infoPlistString(path: ["com.apple.developer.ubiquity-container-identifiers"], key: "iCloud.www.donelkys.NoIce") ?? "iCloud.www.donelkys.NoIce"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefix48G34LX7UBWwwDonelkysNoIce = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)48G34LX7UB.www.donelkys.NoIce") ?? "$(AppIdentifierPrefix)48G34LX7UB.www.donelkys.NoIce"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `user.png`.
    static let userPng = Rswift.FileResource(bundle: R.hostingBundle, name: "user", pathExtension: "png")

    /// `bundle.url(forResource: "user", withExtension: "png")`
    static func userPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `closeUser`.
    static let closeUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeUser")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `fotoperfil`.
    static let fotoperfil = Rswift.ImageResource(bundle: R.hostingBundle, name: "fotoperfil")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `msg`.
    static let msg = Rswift.ImageResource(bundle: R.hostingBundle, name: "msg")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `users`.
    static let users = Rswift.ImageResource(bundle: R.hostingBundle, name: "users")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeUser", bundle: ..., traitCollection: ...)`
    static func closeUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fotoperfil", bundle: ..., traitCollection: ...)`
    static func fotoperfil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fotoperfil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "msg", bundle: ..., traitCollection: ...)`
    static func msg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "users", bundle: ..., traitCollection: ...)`
    static func users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.users, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `UserTableViewCell`.
    static let userTableViewCell = _R.nib._UserTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userTableViewCell) instead")
    static func userTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userTableViewCell)
    }
    #endif

    static func userTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserTableViewCell? {
      return R.nib.userTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `UserCell`.
    static let userCell: Rswift.ReuseIdentifier<UserCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "UserCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// es translation: 2Brice requiere acceder a la cámara de su dispositivo para tomar su foto de perfil.
      ///
      /// Locales: es
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: 2Brice requiere acceder a su localización para mostrar los usuarios conectados cerca de su posición.
      ///
      /// Locales: es
      static let nsLocationWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["es"], comment: nil)

      /// es translation: 2Brice requiere acceder a la cámara de su dispositivo para tomar su foto de perfil.
      ///
      /// Locales: es
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// es translation: 2Brice requiere acceder a su localización para mostrar los usuarios conectados cerca de su posición.
      ///
      /// Locales: es
      static func nsLocationWhenInUseUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSLocationWhenInUseUsageDescription"
        }

        return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 29 localization keys.
    struct main {
      /// es translation: Bloquear
      ///
      /// Locales: es
      static let du257WBNormalTitle = Rswift.StringResource(key: "3du-25-7WB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Buscando Usuarios...
      ///
      /// Locales: es
      static let vWtE2WebText = Rswift.StringResource(key: "vWt-E2-web.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Buscando...
      ///
      /// Locales: es
      static let byz38T0rTitle = Rswift.StringResource(key: "BYZ-38-t0r.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Button
      ///
      /// Locales: es
      static let vTkYAXYpNormalTitle = Rswift.StringResource(key: "vTk-yA-XYp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Cargando...
      ///
      /// Locales: es
      static let qXcIaTA2Text = Rswift.StringResource(key: "QXc-Ia-tA2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Cerrar
      ///
      /// Locales: es
      static let nZqJqL0FNormalTitle = Rswift.StringResource(key: "nZq-Jq-L0F.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Chat
      ///
      /// Locales: es
      static let cexBi2NjTitle = Rswift.StringResource(key: "Cex-bi-2Nj.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Chat
      ///
      /// Locales: es
      static let pdvycgdcTitle = Rswift.StringResource(key: "PDV-YC-gDC.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Click sobre la foto para chatear o desplaza para ocultar y bloquear.
      ///
      /// Locales: es
      static let ealHZVB9Text = Rswift.StringResource(key: "Eal-HZ-VB9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Compartir
      ///
      /// Locales: es
      static let plS7Tq1NormalTitle = Rswift.StringResource(key: "8Pl-s7-Tq1.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Conectados
      ///
      /// Locales: es
      static let boh5gGzfTitle = Rswift.StringResource(key: "BOH-5g-gzf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Conectados
      ///
      /// Locales: es
      static let mVM3KJxsTitle = Rswift.StringResource(key: "mVM-3K-jxs.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Conectados
      ///
      /// Locales: es
      static let pk9LhSjnTitle = Rswift.StringResource(key: "Pk9-lh-Sjn.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Conectados
      ///
      /// Locales: es
      static let ucBfETitle = Rswift.StringResource(key: "604-uc-BfE.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Conectados
      ///
      /// Locales: es
      static let xRWVJrTitle = Rswift.StringResource(key: "33x-rW-vJr.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Editar Foto
      ///
      /// Locales: es
      static let qkoQk2OsNormalTitle = Rswift.StringResource(key: "QKO-Qk-2Os.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Entrar
      ///
      /// Locales: es
      static let mXLBDECKNormalTitle = Rswift.StringResource(key: "mXL-bD-eCK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Item
      ///
      /// Locales: es
      static let kgRIFLSvTitle = Rswift.StringResource(key: "KgR-iF-lSv.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Item
      ///
      /// Locales: es
      static let lhtRdLsITitle = Rswift.StringResource(key: "lht-rd-lsI.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Item
      ///
      /// Locales: es
      static let mfnS2TupTitle = Rswift.StringResource(key: "Mfn-S2-tup.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Item
      ///
      /// Locales: es
      static let momZmVRSTitle = Rswift.StringResource(key: "MOM-Zm-vRS.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Item
      ///
      /// Locales: es
      static let qcWQ7OjnTitle = Rswift.StringResource(key: "qcW-q7-Ojn.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Login
      ///
      /// Locales: es
      static let fdmNIOhwTitle = Rswift.StringResource(key: "fdm-NI-ohw.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Login with:
      ///
      /// Locales: es
      static let bsXNZ1qvText = Rswift.StringResource(key: "bsX-NZ-1qv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Menu
      ///
      /// Locales: es
      static let as4GgJ3cTitle = Rswift.StringResource(key: "As4-gg-j3c.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Menu
      ///
      /// Locales: es
      static let um9YsBX5Title = Rswift.StringResource(key: "UM9-Ys-bX5.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Perfil
      ///
      /// Locales: es
      static let qGZUk4Title = Rswift.StringResource(key: "24q-gZ-uk4.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: Rompe el hielo y encuentra pareja ahora
      ///
      /// Locales: es
      static let heZRoWjJText = Rswift.StringResource(key: "heZ-ro-wjJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)
      /// es translation: usuarios
      ///
      /// Locales: es
      static let kz2T2GMxTitle = Rswift.StringResource(key: "kz2-T2-GMx.title", tableName: "Main", bundle: R.hostingBundle, locales: ["es"], comment: nil)

      /// es translation: Bloquear
      ///
      /// Locales: es
      static func du257WBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3du-25-7WB.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3du-25-7WB.normalTitle"
        }

        return NSLocalizedString("3du-25-7WB.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Buscando Usuarios...
      ///
      /// Locales: es
      static func vWtE2WebText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vWt-E2-web.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vWt-E2-web.text"
        }

        return NSLocalizedString("vWt-E2-web.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Buscando...
      ///
      /// Locales: es
      static func byz38T0rTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BYZ-38-t0r.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BYZ-38-t0r.title"
        }

        return NSLocalizedString("BYZ-38-t0r.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Button
      ///
      /// Locales: es
      static func vTkYAXYpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vTk-yA-XYp.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vTk-yA-XYp.normalTitle"
        }

        return NSLocalizedString("vTk-yA-XYp.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Cargando...
      ///
      /// Locales: es
      static func qXcIaTA2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QXc-Ia-tA2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "QXc-Ia-tA2.text"
        }

        return NSLocalizedString("QXc-Ia-tA2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Cerrar
      ///
      /// Locales: es
      static func nZqJqL0FNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nZq-Jq-L0F.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nZq-Jq-L0F.normalTitle"
        }

        return NSLocalizedString("nZq-Jq-L0F.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Chat
      ///
      /// Locales: es
      static func cexBi2NjTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cex-bi-2Nj.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Cex-bi-2Nj.title"
        }

        return NSLocalizedString("Cex-bi-2Nj.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Chat
      ///
      /// Locales: es
      static func pdvycgdcTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PDV-YC-gDC.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PDV-YC-gDC.title"
        }

        return NSLocalizedString("PDV-YC-gDC.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Click sobre la foto para chatear o desplaza para ocultar y bloquear.
      ///
      /// Locales: es
      static func ealHZVB9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eal-HZ-VB9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Eal-HZ-VB9.text"
        }

        return NSLocalizedString("Eal-HZ-VB9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Compartir
      ///
      /// Locales: es
      static func plS7Tq1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Pl-s7-Tq1.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Pl-s7-Tq1.normalTitle"
        }

        return NSLocalizedString("8Pl-s7-Tq1.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Conectados
      ///
      /// Locales: es
      static func boh5gGzfTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BOH-5g-gzf.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BOH-5g-gzf.title"
        }

        return NSLocalizedString("BOH-5g-gzf.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Conectados
      ///
      /// Locales: es
      static func mVM3KJxsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mVM-3K-jxs.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mVM-3K-jxs.title"
        }

        return NSLocalizedString("mVM-3K-jxs.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Conectados
      ///
      /// Locales: es
      static func pk9LhSjnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pk9-lh-Sjn.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Pk9-lh-Sjn.title"
        }

        return NSLocalizedString("Pk9-lh-Sjn.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Conectados
      ///
      /// Locales: es
      static func ucBfETitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("604-uc-BfE.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "604-uc-BfE.title"
        }

        return NSLocalizedString("604-uc-BfE.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Conectados
      ///
      /// Locales: es
      static func xRWVJrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("33x-rW-vJr.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "33x-rW-vJr.title"
        }

        return NSLocalizedString("33x-rW-vJr.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Editar Foto
      ///
      /// Locales: es
      static func qkoQk2OsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QKO-Qk-2Os.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "QKO-Qk-2Os.normalTitle"
        }

        return NSLocalizedString("QKO-Qk-2Os.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Entrar
      ///
      /// Locales: es
      static func mXLBDECKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mXL-bD-eCK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mXL-bD-eCK.normalTitle"
        }

        return NSLocalizedString("mXL-bD-eCK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Item
      ///
      /// Locales: es
      static func kgRIFLSvTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KgR-iF-lSv.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KgR-iF-lSv.title"
        }

        return NSLocalizedString("KgR-iF-lSv.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Item
      ///
      /// Locales: es
      static func lhtRdLsITitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lht-rd-lsI.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lht-rd-lsI.title"
        }

        return NSLocalizedString("lht-rd-lsI.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Item
      ///
      /// Locales: es
      static func mfnS2TupTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mfn-S2-tup.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Mfn-S2-tup.title"
        }

        return NSLocalizedString("Mfn-S2-tup.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Item
      ///
      /// Locales: es
      static func momZmVRSTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MOM-Zm-vRS.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MOM-Zm-vRS.title"
        }

        return NSLocalizedString("MOM-Zm-vRS.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Item
      ///
      /// Locales: es
      static func qcWQ7OjnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qcW-q7-Ojn.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qcW-q7-Ojn.title"
        }

        return NSLocalizedString("qcW-q7-Ojn.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Login
      ///
      /// Locales: es
      static func fdmNIOhwTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fdm-NI-ohw.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fdm-NI-ohw.title"
        }

        return NSLocalizedString("fdm-NI-ohw.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Login with:
      ///
      /// Locales: es
      static func bsXNZ1qvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bsX-NZ-1qv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bsX-NZ-1qv.text"
        }

        return NSLocalizedString("bsX-NZ-1qv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Menu
      ///
      /// Locales: es
      static func as4GgJ3cTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("As4-gg-j3c.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "As4-gg-j3c.title"
        }

        return NSLocalizedString("As4-gg-j3c.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Menu
      ///
      /// Locales: es
      static func um9YsBX5Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UM9-Ys-bX5.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UM9-Ys-bX5.title"
        }

        return NSLocalizedString("UM9-Ys-bX5.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Perfil
      ///
      /// Locales: es
      static func qGZUk4Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("24q-gZ-uk4.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "24q-gZ-uk4.title"
        }

        return NSLocalizedString("24q-gZ-uk4.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: Rompe el hielo y encuentra pareja ahora
      ///
      /// Locales: es
      static func heZRoWjJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heZ-ro-wjJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "heZ-ro-wjJ.text"
        }

        return NSLocalizedString("heZ-ro-wjJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// es translation: usuarios
      ///
      /// Locales: es
      static func kz2T2GMxTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kz2-T2-GMx.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kz2-T2-GMx.title"
        }

        return NSLocalizedString("kz2-T2-GMx.title", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.userTableViewCell` struct is generated, and contains static references to 1 localization keys.
    struct userTableViewCell {
      /// es translation: chat   >
      ///
      /// Locales: es
      static let bmi29P0bText = Rswift.StringResource(key: "bmi-29-P0b.text", tableName: "UserTableViewCell", bundle: R.hostingBundle, locales: ["es"], comment: nil)

      /// es translation: chat   >
      ///
      /// Locales: es
      static func bmi29P0bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bmi-29-P0b.text", tableName: "UserTableViewCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "UserTableViewCell", preferredLanguages: preferredLanguages) else {
          return "bmi-29-P0b.text"
        }

        return NSLocalizedString("bmi-29-P0b.text", tableName: "UserTableViewCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _UserTableViewCell.validate()
    }

    struct _UserTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "conected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'conected' is used in nib 'UserTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "msg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'msg' is used in nib 'UserTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let chat = StoryboardViewControllerResource<ChatViewController>(identifier: "Chat")
      let inicioView = StoryboardViewControllerResource<InicioController>(identifier: "InicioView")
      let loginView = StoryboardViewControllerResource<LoginController>(identifier: "loginView")
      let name = "Main"
      let profileView = StoryboardViewControllerResource<ProfileController>(identifier: "ProfileView")
      let usersConnected = StoryboardViewControllerResource<UsersConnected>(identifier: "UsersConnected")

      func chat(_: Void = ()) -> ChatViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chat)
      }

      func inicioView(_: Void = ()) -> InicioController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inicioView)
      }

      func loginView(_: Void = ()) -> LoginController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginView)
      }

      func profileView(_: Void = ()) -> ProfileController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileView)
      }

      func usersConnected(_: Void = ()) -> UsersConnected? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: usersConnected)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeUser' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'help' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "msg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'msg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "users", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'users' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().chat() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chat' could not be loaded from storyboard 'Main' as 'ChatViewController'.") }
        if _R.storyboard.main().inicioView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inicioView' could not be loaded from storyboard 'Main' as 'InicioController'.") }
        if _R.storyboard.main().profileView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileView' could not be loaded from storyboard 'Main' as 'ProfileController'.") }
        if _R.storyboard.main().usersConnected() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'usersConnected' could not be loaded from storyboard 'Main' as 'UsersConnected'.") }
        if _R.storyboard.main().loginView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginView' could not be loaded from storyboard 'Main' as 'LoginController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
